#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>

#include <ESP8266HTTPClient.h>

ESP8266WiFiMulti WiFiMulti;

//////////////////// SET THESE UP ////////////////////////
// WiFi SSID and Password
const char* ssid = "ssid name";
const char* password = "ssid password";
// The web host of the readable file
const char* cmdURL = "http://SERVER.com/cmd.txt";
/////////////////////////////////////////////////////////

//////////////////////START OF OLED//////////////////////////////////
//PINS
//D1-mini   Shield
//   D1       SCL
//   D2       SDA
#include <Wire.h>  // Include Wire if you're using I2C
#include <SFE_MicroOLED.h>  // Include the SFE_MicroOLED library
#define PIN_RESET 255  //
#define DC_JUMPER 0  // I2C Addres: 0 - 0x3C, 1 - 0x3D
//////////////////////////////////
// MicroOLED Object Declaration //
//////////////////////////////////
MicroOLED oled(PIN_RESET, DC_JUMPER);  // I2C Example
//------------------------------------------------------------------------------
// File generated by LCD Assistant
// http://en.radzio.dxp.pl/bitmap_converter/
//------------------------------------------------------------------------------
//This is the array that holds the Bitmap image. The easiest way to convert a bmp
//to an array is to use the LCD Assistant linked above. 
uint8_t bender [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x04, 0x84, 0x84, 0x84,
0x84, 0x84, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x04, 0x0C, 0x18, 0x78,
0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0x00, 0x00, 0x00, 0x39, 0x39, 0x39,
0x39, 0x39, 0x00, 0x00, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xE0, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xE0, 0xF0, 0xF8, 0xFE,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFC, 0x7C, 0x7C, 0x7E, 0x7E, 0x7E,
0x7E, 0x7E, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0x00,
0x00, 0x00, 0xFF, 0x3F, 0x3F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x07, 0x1F, 0x1F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x73, 0x71, 0x71, 0x71, 0x70,
0x70, 0x70, 0x71, 0x70, 0x70, 0x70, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F,
0x3F, 0x1F, 0x1F, 0x0F, 0x0F, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//////////////////////END OF OLED//////////////////////////////////

// Initialize
int PWM1 = D7; // PWM Pin Motor 1 (ln1)
int PoM1 = D8;   // Polarity Pin Motor 1 (ln2)
int PWM2 = D5; // PWM Pin Motor 2 (ln4)
int PoM2 = D6;   // Polarity Pin Motor 2 (ln3)
int enA = D3; //Motor1 Speed Pin (although it will not be used, for simplicity)
int enB = D4; //Motor2 Speed Pin (although it will not be used, for simplicity)


int Motor1Speed = 123; // Speed 0-255. Output is 3.3v (analog). LLC needed. (Motor starts rotating after 4,5V)
int Motor2Speed = 123; // Speed 0-255. Output is 3.3v (analog., LLC needed. (Motor starts rotating after 4,5V)

void setup()
{
  //////////////////////START OF OLED//////////////////////////////////
  // These three lines of code are all you need to initialize the
  // OLED and print the splash screen.
  
  // Before you can start using the OLED, call begin() to init
  // all of the pins and configure the OLED.
  oled.begin();
  // clear(ALL) will clear out the OLED's graphic memory.
  // clear(PAGE) will clear the Arduino's display buffer.
  oled.clear(ALL);  // Clear the display's memory (gets rid of artifacts)
  // To actually draw anything on the display, you must call the
  // display() function. 
  oled.display();   
  delay(1000);//pause for the splash screen
  //Note: You can change the spalsh screen by editing the array founf in the library source code
  
  oled.clear(PAGE);//clear the screen before we draw our image
  oled.drawBitmap(bender);//call the drawBitmap function and pass it the array from above
  oled.display();//display the imgae 
  //////////////////////END OF OLED//////////////////////////////////
  pinMode(PWM1, OUTPUT); 
  pinMode(PoM1, OUTPUT); 
  pinMode(PWM2, OUTPUT);   
  pinMode(PoM2, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  Serial.begin(115200);         // Used to check value 
  Serial.setDebugOutput(true);
  Serial.println();
  Serial.println();
  Serial.println();

  for(uint8_t t = 4; t > 0; t--) {
      Serial.printf("[SETUP] WAIT %d...\n", t);
      Serial.flush();
      delay(1000);
  }

  WiFiMulti.addAP(ssid, password);
}

void motor1Forward() {
  digitalWrite(PoM1, HIGH) ;   // Both motor with same polarity
  analogWrite(PWM1, 20);   // Stop both motors =&gt; ValMx = 0  
}

void motor1Backwards() {
  digitalWrite(PoM1, LOW) ;   // Both motor with same polarity
  analogWrite(PWM1, -20);   // Stop both motors =&gt; ValMx = 0  
}

void motor1Stop() {
  analogWrite(PWM1, 0);   // Stop both motors =&gt; ValMx = 0  
  digitalWrite(PoM1, LOW) ;   // Both motor with same polarity
}

void motor2Forward() {
  digitalWrite(PoM2, HIGH) ;   // Both motor with same polarity
  analogWrite(PWM2, 20);   // Stop both motors =&gt; ValMx = 0  
}

void motor2Backwards() {
  digitalWrite(PoM2, LOW) ;   // Both motor with same polarity
  analogWrite(PWM2, -20);   // Stop both motors =&gt; ValMx = 0  
}

void motor2Stop() {
  analogWrite(PWM2, 0);   // Stop both motors =&gt; ValMx = 0  
  digitalWrite(PoM2, LOW) ;   // Both motor with same polarity
}
// Main program
void loop()
{   
    // Set the speed for each motor
    analogWrite(enA, Motor1Speed);
    analogWrite(enB, Motor2Speed);

    
    if((WiFiMulti.run() == WL_CONNECTED)) {

        HTTPClient http;

        Serial.print("[HTTP] begin...\n");
        // configure traged server and url
        http.begin(cmdURL); //HTTP

        Serial.print("[HTTP] GET...\n");
        // start connection and send HTTP header
        int httpCode = http.GET();

        // httpCode will be negative on error
        if(httpCode > 0) {
            // HTTP header has been send and Server response header has been handled
            Serial.printf("[HTTP] GET... code: %d\n", httpCode);

            // file found at server
            if(httpCode == HTTP_CODE_OK) {
                String result = http.getString();
                Serial.print("Motor 1 : " + result.substring(0,1) + "\n");
                Serial.print("Motor 2 : " + result.substring(1,2) + "\n");
                switch (result.substring(0,1).toInt()) {
                    case 2:motor1Forward();
                             break;
                    case 1:motor1Backwards();
                             break;
                    default:motor1Stop();
                      break;
                }
                switch (result.substring(1,2).toInt()) {
                    case 2:motor2Forward();
                             break;
                    case 1:motor2Backwards();
                             break;
                    default:motor2Stop();
                      break;
                }
            }
        } else {
            Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
            motor1Stop(); // STOP the car in case of signal lost. (For emergency just switch off the router)
            motor2Stop(); // STOP the car in case of signal lost. (For emergency just switch off the router)
        }

        http.end();
    }
      delay(888);
      //The motor#stop() below will stop the car every ~1sec, to avoid chasing it :P
      motor1Stop(); // STOP the car in case of signal lost. (For emergency just switch off the router)
      motor2Stop(); // STOP the car in case of signal lost. (For emergency just switch off the router)
  
}
// End.
